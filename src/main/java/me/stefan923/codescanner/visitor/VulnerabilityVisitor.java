package me.stefan923.codescanner.visitor;

import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import me.stefan923.codescanner.Vulnerability;
import me.stefan923.codescanner.detector.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Implementation of VoidVisitorAdapter that processes each method declaration. For every method, it:
 * 1. Runs a taint tracking visitor to record which variables are “tainted” (i.e. come from user input).
 * 2. Visits all method calls (inside that method) and checks whether any argument is tainted.
 * 3. Checks for CSRF in HTTP handler methods.
 */
public class VulnerabilityVisitor extends VoidVisitorAdapter<Void> {
    private final List<Vulnerability> vulnerabilities;
    private final MethodTaintAnalyzer methodTaintAnalyzer = new MethodTaintAnalyzer();

    private final CompositeVulnerabilityDetector statementVisitingDetector = new CompositeVulnerabilityDetector();
    private final CompositeVulnerabilityDetector methodDeclarationVisitingDetector = new CompositeVulnerabilityDetector();

    public VulnerabilityVisitor(List<Vulnerability> vulnerabilities) {
        this.vulnerabilities = vulnerabilities;

        this.statementVisitingDetector.addDetector(new SQLiDetector());
        this.statementVisitingDetector.addDetector(new XSSDetector());
        this.statementVisitingDetector.addDetector(new BufferOverflowDetector());
        this.statementVisitingDetector.addDetector(new CSRFDetector());
        this.statementVisitingDetector.addDetector(new IntegerOverflowDetector());
        this.statementVisitingDetector.addDetector(new IntegerUnderflowDetector());

        this.methodDeclarationVisitingDetector.addDetector(new CSRFDetector());
    }

    @Override
    public void visit(MethodDeclaration md, Void arg) {
        super.visit(md, arg);

        // Analyze taint for this method
        Map<String, Boolean> taintMap = methodTaintAnalyzer.analyzeMethod(md);

        // Propagate taint to called methods
        md.getBody().ifPresent(body -> {
            vulnerabilities.addAll(methodDeclarationVisitingDetector.detect(md, taintMap));
            body.accept(new DetectionVisitor(taintMap, statementVisitingDetector, vulnerabilities, methodTaintAnalyzer), null);
        });
    }
}
